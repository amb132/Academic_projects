{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOtJrG/a6eP7r2pR6QgPwqp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/amb132/A-Study-on-the-Future-Prediction-of-Crypto-Currency-Prices-using-Deep-Learning/blob/main/Strategy.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_g72jY4WVHTX"
      },
      "outputs": [],
      "source": [
        "from order_functions.zerodha import *\n",
        "from telegram.tgfunctions import send_alert\n",
        "from strategy.models import *\n",
        "from strategy.helper_functions import *\n",
        "from strategy.position_management import *\n",
        "import datetime\n",
        "from decimal import Decimal\n",
        "from alice_blue import *\n",
        "# from pya3 import *\n",
        "from order_functions.aliceblue import *\n",
        "import threading\n",
        "import pandas as pd\n",
        "import requests\n",
        "from pprint import pprint\n",
        "\n",
        "import asyncio\n",
        "import json\n",
        "import ssl\n",
        "import websockets\n",
        "from google.protobuf.json_format import MessageToDict\n",
        "import MarketDataFeed_pb2 as pb\n",
        "import upstox_client\n",
        "import pytz\n",
        "import threading\n",
        "import pyotp\n",
        "import requests\n",
        "import pandas as pd\n",
        "import datetime\n",
        "import urllib.parse\n",
        "import pandas as pd\n",
        "import requests\n",
        "import asyncio\n",
        "from fyers_apiv3 import fyersModel\n",
        "from fyers_apiv3 import FyersApp as fy_app\n",
        "from fyers_apiv3.FyersWebsocket import data_ws\n",
        "\n",
        "from\n",
        "\n",
        "\n",
        "alice = []\n",
        "tickfeed = 'Zerodha'\n",
        "candlefeed = True\n",
        "\n",
        "cash_df = pd.DataFrame()\n",
        "\n",
        "# updated instrument list to subscribe at initial stage and resubscribe\n",
        "instrument_list = []\n",
        "\n",
        "# defining some dict for order status capturing\n",
        "order_dict = {}\n",
        "order_status = {}\n",
        "\n",
        "# these 3 are used for live data handeling\n",
        "\n",
        "# this is used for strategy specific instrument mapping using zerodha instrument_token s\n",
        "live_instrument_dict = {}\n",
        "instrument_to_ltp = {}\n",
        "instrument_to_token = {}\n",
        "candle_instruments = {}\n",
        "\n",
        "day_to_field_map = {\n",
        "        0: 'monday_nearest',\n",
        "        1: 'tuesday_nearest',\n",
        "        2: 'wednesday_nearest',\n",
        "        3: 'thursday_nearest',\n",
        "        4: 'friday_nearest',\n",
        "        5: 'friday_nearest',\n",
        "        6: 'monday_nearest'\n",
        "        # Add more days if needed\n",
        "    }\n",
        "\n",
        "exchange_type_mapping = {\n",
        "    'NSE': 1,\n",
        "    'NFO-FUT': 2,\n",
        "    'NFO-OPT': 2,\n",
        "    'BSE': 3,\n",
        "    'BFO-FUT': 4,\n",
        "    'BFO-OPT': 4,\n",
        "    'MCX-FUT': 5,\n",
        "    'MCX-OPT': 5\n",
        "}\n",
        "\n",
        "zerodha_to_upstox_mapping_dict = {\n",
        "    'BCD-FUT': 'BCD_FO',\n",
        "    'BCD-OPT': 'BCD_FO',\n",
        "    'BFO-OPT': 'NSE_FO',\n",
        "    'BFO-FUT': 'NSE_FO',\n",
        "    'BSE': 'BSE_EQ',\n",
        "    'INDICES': 'NSE_INDEX',\n",
        "    'CDS-FUT': 'NCD_FO',\n",
        "    'CDS-OPT': 'NCD_FO',\n",
        "    'MCX-FUT': 'MCX_FO',\n",
        "    'MCX-OPT': 'MCX_FO',\n",
        "    'NFO-FUT': 'NSE_FO',\n",
        "    'NFO-OPT': 'NSE_FO',\n",
        "    'NSE': 'NSE_EQ'\n",
        "}\n",
        "\n",
        "\n",
        "global zerodha\n",
        "global fyers_mapping_data\n",
        "global upstox_df\n",
        "global historical_data\n",
        "\n",
        "global zerodha_mapping_dictionary\n",
        "\n",
        "historical_data = {}\n",
        "zerodha_mapping_dictionary= {}\n",
        "zerodha = pd.DataFrame()\n",
        "fyers_mapping_data = pd.DataFrame()\n",
        "upstox_df = pd.DataFrame()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def create_instrument_master():\n",
        "\n",
        "\n",
        "\n",
        "    zerodha = pd.read_csv('https://api.kite.trade/instruments')\n",
        "\n",
        "\n",
        "\n",
        "    #  Instrument_data preparation complete +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
        "\n",
        "def get_tradingsymbol(instrument_token): # instrument_token as int\n",
        "    tradingsymbol = cash_df[cash_df['instrument_token']==instrument_token]['tradingsymbol'].item()\n",
        "    return tradingsymbol\n",
        "\n",
        "def calculate_heikin_ashi(df):\n",
        "    ha_df = pd.DataFrame(index=df.index, columns=['open', 'high', 'low', 'close'])\n",
        "\n",
        "    # Set the first row of ha_df to be the same as the first row of df\n",
        "    ha_df.iloc[0] = df.iloc[0][['open', 'high', 'low', 'close']]\n",
        "\n",
        "    ha_df['close'] = (df['open'] + df['high'] + df['low'] + df['close']) / 4\n",
        "\n",
        "    for i in range(1, len(df)):\n",
        "        ha_df.at[df.index[i], 'open'] = round((ha_df.at[df.index[i - 1], 'open'] + ha_df.at[df.index[i - 1], 'close']) / 2, 2)\n",
        "        ha_df.at[df.index[i], 'high'] = round(max(df.at[df.index[i], 'high'], ha_df.at[df.index[i], 'open'], ha_df.at[df.index[i], 'close']), 2)\n",
        "        ha_df.at[df.index[i], 'low'] = round(min(df.at[df.index[i], 'low'], ha_df.at[df.index[i], 'open'], ha_df.at[df.index[i], 'close']), 2)\n",
        "        ha_df.at[df.index[i], 'close'] = round(ha_df.at[df.index[i], 'close'], 2)\n",
        "\n",
        "    return ha_df\n",
        "# df = pd.read_csv('https://api.kite.trade/instruments')\n",
        "\n",
        "def calculate_next_entry_time(interval):\n",
        "    current_time = datetime.datetime.now()  # Current time including seconds\n",
        "    start_time = datetime.datetime.strptime('09:15:00', '%H:%M:%S')  # Market opening time\n",
        "    interval_map = {\n",
        "        'minute': 60,\n",
        "        '3minute': 3 * 60,\n",
        "        '5minute': 5 * 60,\n",
        "        '10minute': 10 * 60,\n",
        "        '15minute': 15 * 60,\n",
        "        '30minute': 30 * 60,\n",
        "        '60minute': 60 * 60,\n",
        "    }\n",
        "    interval_seconds = interval_map.get(interval, 60)\n",
        "    seconds_diff = (current_time - start_time).seconds\n",
        "    next_entry_seconds = interval_seconds * ((seconds_diff + interval_seconds - 1) // interval_seconds)\n",
        "    next_entry_time = start_time + datetime.timedelta(seconds=next_entry_seconds)\n",
        "\n",
        "    return next_entry_time.time()\n",
        "\n",
        "def check_single_strategy(strategy,today_field_name,today_day_of_week,alice_object,alice_data,kite_object,orderbook,positionbook):\n",
        "\n",
        "    today_nearest_price = float(getattr(strategy, today_field_name))\n",
        "    run_days = [strategy.run_monday, strategy.run_tuesday, strategy.run_wednesday, strategy.run_thursday, strategy.run_friday,True,True]\n",
        "    run_today = run_days[today_day_of_week] if today_day_of_week < len(run_days) else False\n",
        "    entry_multiplier = 1 + float(strategy.entry_buffer)/100\n",
        "    try:\n",
        "        instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][int(strategy.instrument_token)]['exchange_token'])\n",
        "    except:\n",
        "        print('Passing instrument creation...')\n",
        "        pass\n",
        "\n",
        "    # basic checks before running the model\n",
        "    if strategy.start_time < datetime.datetime.now().time() and strategy.end_time > datetime.datetime.now().time() and run_today and strategy.intraday_exit >datetime.datetime.now().time():\n",
        "\n",
        "        # try:\n",
        "            # Trade_status = [('1',\"Scan Pending\"),('2',\"Entry Sent to exchange\"),(\"3\",\"Entry Order Executed - TP SL Placement Pending\"),(\"4\",\"TP SL Placed\"),(\"5\",\"TP/SL hit - Other order pending\"),(\"6\",'Trade Complete: TP/SL Pending cancelled')]\n",
        "        if int(strategy.trade_status) == 1:\n",
        "            # get the instrument token or tokens based on client's filter condition from the InstrumentDetails table eg:Banknigty current week calls\n",
        "            print('Entered Scan...')\n",
        "            tokens = list(live_instrument_dict[strategy.strategy_name]['data'].keys())\n",
        "\n",
        "            # if client didnt single out instrument then filter it further to the final instrument\n",
        "            if len(tokens) > 0:\n",
        "                # final_token = min(tokens, key=lambda x: abs(instrument_to_ltp[x] - today_nearest_price))\n",
        "                final_token = min((token for token in tokens if instrument_to_ltp[token] < today_nearest_price), key=lambda x: abs(instrument_to_ltp[x] - today_nearest_price))\n",
        "\n",
        "                send_alert(f\"Strategy Name :{strategy.strategy_name}, selected instrument: {get_tradingsymbol(final_token)}\")\n",
        "\n",
        "                strategy.instrument_token = final_token\n",
        "                # get ltp or candle historical data based on client's logic checking criteris for entry\n",
        "                end = start = datetime.date.today()\n",
        "                no_of_candles_needed = 2\n",
        "                instrument_df = (pd.DataFrame(kite_object.historical_data(final_token,start,end,strategy.interval)))\n",
        "                instrument_df = calculate_heikin_ashi(instrument_df).tail(no_of_candles_needed).reset_index()\n",
        "\n",
        "                print(instrument_df)\n",
        "\n",
        "                h1,l1 = instrument_df['high'][0],instrument_df['low'][0]\n",
        "                strategy.trigger_price = round_nearest(h1 * entry_multiplier)\n",
        "                strategy.limit_price = round_nearest(h1 * entry_multiplier *1.005)\n",
        "\n",
        "                if strategy.last_candle_low:\n",
        "                    strategy.sl_price = max(round_nearest(l1),round_nearest(h1 * entry_multiplier * (1-float(strategy.initial_sl)/100)))\n",
        "                else:\n",
        "                    strategy.sl_price = round_nearest(h1 * entry_multiplier * (1-float(strategy.initial_sl)/100))\n",
        "\n",
        "                # ----- place order in alice at trigger price\n",
        "                print(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][final_token]['exchange_token'])\n",
        "                instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][final_token]['exchange_token'])\n",
        "\n",
        "                quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "\n",
        "                order_params_alice = {\n",
        "                                    \"complexty\": \"regular\",\n",
        "                                    \"discqty\": \"0\",\n",
        "                                    \"exch\": strategy.instrument_segment[:3],\n",
        "                                    \"pCode\": 'NRML',\n",
        "                                    \"prctyp\": \"SL\",\n",
        "                                    \"price\": float(round_nearest(h1 * entry_multiplier *1.005)),\n",
        "                                    \"qty\": quantity,\n",
        "                                    \"ret\": \"DAY\",\n",
        "                                    \"symbol_id\": str(instrument_alice.token),\n",
        "                                    \"trading_symbol\": instrument_alice.symbol,\n",
        "                                    \"transtype\": 'BUY',\n",
        "                                    \"trigPrice\": float(round_nearest(h1 * entry_multiplier))\n",
        "                                }\n",
        "                ltp = instrument_to_ltp[final_token]\n",
        "                if ltp < float(round_nearest(h1 * entry_multiplier)):\n",
        "                    response  = place_order_alice(alice_data.UserID,alice_data.AccessToken, order_params_alice)\n",
        "                    # ---- get the order id\n",
        "                    oid = response[0]['NOrdNo']\n",
        "                    send_alert(f\"Strategy Name :{strategy.strategy_name}, selected instrument: {get_tradingsymbol(final_token)}, trigger-price: {round_nearest(h1 * entry_multiplier)},entry-price: {round_nearest(h1 * entry_multiplier *1.005)}, order_id: {oid}\")\n",
        "\n",
        "                    #  ---- save the order id\n",
        "                    strategy.entry_oid = oid\n",
        "                    strategy.trade_status = 2\n",
        "                    strategy.save()\n",
        "\n",
        "        elif int(strategy.trade_status) == 2:\n",
        "\n",
        "\n",
        "            # get order status from orderbook\n",
        "            order_status = (orderbook[orderbook['Nstordno'] == strategy.entry_oid]['Status'].values)[0]\n",
        "            # order_status\n",
        "            # print(order_status)\n",
        "            # order_status = \"pending\"\n",
        "            print(f'entered 2 : {strategy.strategy_name} ; Entry Order Status: {order_status}')\n",
        "\n",
        "            if order_status == 'trigger pending':\n",
        "\n",
        "                tokens = list(live_instrument_dict[strategy.strategy_name]['data'].keys())\n",
        "                # final_token = min(tokens, key=lambda x: abs(instrument_to_ltp[x] - today_nearest_price))\n",
        "                final_token = min((token for token in tokens if instrument_to_ltp[token] < today_nearest_price), key=lambda x: abs(instrument_to_ltp[x] - today_nearest_price))\n",
        "\n",
        "\n",
        "                if int(strategy.instrument_token) != int(final_token):\n",
        "                    send_alert(f\"{strategy.strategy_name}: Changing Instrument as price changed\")\n",
        "\n",
        "\n",
        "                    # get ltp or candle historical data based on client's logic checking criteris for entry\n",
        "                    end = start =  datetime.date.today()\n",
        "                    no_of_candles_needed = 2\n",
        "                    candle_data = (pd.DataFrame(kite_object.historical_data(final_token,start,end,strategy.interval)))\n",
        "                    instrument_df = calculate_heikin_ashi(candle_data.tail(no_of_candles_needed).reset_index())\n",
        "                    print(candle_data.tail(no_of_candles_needed))\n",
        "                    print(instrument_df)\n",
        "                    h1,l1 = instrument_df['high'][0],instrument_df['low'][0]\n",
        "                    strategy.instrument_token = final_token\n",
        "\n",
        "                    # modify entry price , sl ,tp (if needed)\n",
        "                    strategy.trigger_price = round_nearest(h1 * entry_multiplier)\n",
        "                    strategy.limit_price = round_nearest(h1 * entry_multiplier *1.005)\n",
        "                    if strategy.last_candle_low:\n",
        "                        strategy.sl_price = max(round_nearest(l1),round_nearest(h1 * entry_multiplier * (1-float(strategy.initial_sl)/100)))\n",
        "                    else:\n",
        "                        strategy.sl_price = round_nearest(h1 * entry_multiplier * (1-float(strategy.initial_sl)/100))\n",
        "\n",
        "                    # ----- place order in alice at trigger price\n",
        "                    instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][final_token]['exchange_token'])\n",
        "                    quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "                    alice_object.cancel_order(strategy.entry_oid)\n",
        "                    order_params_alice = {\n",
        "                                            \"complexty\": \"regular\",\n",
        "                                            \"discqty\": \"0\",\n",
        "                                            \"exch\": strategy.instrument_segment[:3],\n",
        "                                            \"pCode\": 'NRML',\n",
        "                                            \"prctyp\": \"SL\",\n",
        "                                            \"price\": float(round_nearest(h1 * entry_multiplier *1.005)),\n",
        "                                            \"qty\": quantity,\n",
        "                                            \"ret\": \"DAY\",\n",
        "                                            \"symbol_id\": str(instrument_alice.token),\n",
        "                                            \"trading_symbol\": instrument_alice.symbol,\n",
        "                                            \"transtype\": 'BUY',\n",
        "                                            \"trigPrice\": float(round_nearest(h1 * entry_multiplier))\n",
        "                                        }\n",
        "\n",
        "                    response  = place_order_alice(alice_data.UserID,alice_data.AccessToken, order_params_alice)\n",
        "                    # ---- get the order id\n",
        "                    oid = response[0]['NOrdNo']\n",
        "                    send_alert(f\"Strategy Name :{strategy.strategy_name}, selected instrument: {get_tradingsymbol(final_token)}, trigger-price: {round_nearest(h1 * entry_multiplier)},entry-price: {round_nearest(h1 * entry_multiplier *1.005)}, order_id: {oid}\")\n",
        "\n",
        "                    #  ---- save the order id\n",
        "                    strategy.entry_oid = oid\n",
        "                    strategy.trade_status = 2\n",
        "                    strategy.save()\n",
        "\n",
        "                else:\n",
        "                    end = start =  datetime.date.today()\n",
        "                    no_of_candles_needed = 2\n",
        "                    candle_data = (pd.DataFrame(kite_object.historical_data(final_token,start,end,strategy.interval)))\n",
        "                    instrument_df = calculate_heikin_ashi(candle_data.tail(no_of_candles_needed).reset_index())\n",
        "                    print(candle_data.tail(no_of_candles_needed))\n",
        "                    print(instrument_df)\n",
        "                    # instrument_df = calculate_heikin_ashi((pd.DataFrame(kite_object.historical_data(strategy.instrument_token,start,end,strategy.interval))).tail(no_of_candles_needed).reset_index())\n",
        "                    h1,l1 = instrument_df['high'][0],instrument_df['low'][0]\n",
        "                    # print(instrument_df)\n",
        "\n",
        "                    # modify entry price , sl ,tp (if needed)\n",
        "\n",
        "                    if float(strategy.trigger_price) != float(round_nearest(h1 * entry_multiplier)):\n",
        "                        print(float(strategy.trigger_price),float(round_nearest(h1 * entry_multiplier)))\n",
        "                        strategy.trigger_price = round_nearest(h1 * entry_multiplier)\n",
        "\n",
        "                        if strategy.last_candle_low:\n",
        "                            strategy.sl_price = max(round_nearest(l1),round_nearest(h1 * entry_multiplier * (1-float(strategy.initial_sl)/100)))\n",
        "                        else:\n",
        "                            strategy.sl_price = round_nearest(h1 * entry_multiplier * (1-float(strategy.initial_sl)/100))\n",
        "\n",
        "                        instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][int(strategy.instrument_token)]['exchange_token'])\n",
        "                        price = round_nearest(h1 * entry_multiplier *1.005)\n",
        "                        trigger_price = round_nearest(h1 * entry_multiplier)\n",
        "                        oid = strategy.entry_oid\n",
        "\n",
        "                        alice_object.cancel_order(strategy.entry_oid)\n",
        "                        quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "                        instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][int(strategy.instrument_token)]['exchange_token'])\n",
        "                        order_params_alice = {\n",
        "                                            \"complexty\": \"regular\",\n",
        "                                            \"discqty\": \"0\",\n",
        "                                            \"exch\": strategy.instrument_segment[:3],\n",
        "                                            \"pCode\": 'NRML',\n",
        "                                            \"prctyp\": \"SL\",\n",
        "                                            \"price\": price,\n",
        "                                            \"qty\": quantity,\n",
        "                                            \"ret\": \"DAY\",\n",
        "                                            \"symbol_id\": str(instrument_alice.token),\n",
        "                                            \"trading_symbol\": instrument_alice.symbol,\n",
        "                                            \"transtype\": 'BUY',\n",
        "                                            \"trigPrice\": trigger_price\n",
        "                                        }\n",
        "\n",
        "                        response  = place_order_alice(alice_data.UserID,alice_data.AccessToken, order_params_alice)\n",
        "                        # ---- get the order id\n",
        "                        oid = response[0]['NOrdNo']\n",
        "                        strategy.trigger_price = trigger_price\n",
        "                        strategy.limit_price = price\n",
        "                        strategy.entry_oid = oid\n",
        "                        strategy.save()\n",
        "\n",
        "                        # print(response.text)\n",
        "\n",
        "\n",
        "                        send_alert(f\"Strategy Name :{strategy.strategy_name}, selected instrument: {get_tradingsymbol(final_token)}, trigger-price modified to: {trigger_price},entry-price modified to: {price}\")\n",
        "\n",
        "\n",
        "\n",
        "                    # modify order\n",
        "\n",
        "            elif order_status == 'complete':\n",
        "                # strategy.trade_status = 3\n",
        "                # strategy.save()\n",
        "                # place sl order\n",
        "                instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][int(strategy.instrument_token)]['exchange_token'])\n",
        "                quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "                order_params_alice = {\n",
        "                                    \"complexty\": \"regular\",\n",
        "                                    \"discqty\": \"0\",\n",
        "                                    \"exch\": strategy.instrument_segment[:3],\n",
        "                                    \"pCode\": 'NRML',\n",
        "                                    \"prctyp\": \"SL\",\n",
        "                                    \"price\": round_nearest(float(strategy.sl_price)*.99),\n",
        "                                    \"qty\": quantity,\n",
        "                                    \"ret\": \"DAY\",\n",
        "                                    \"symbol_id\": str(instrument_alice.token),\n",
        "                                    \"trading_symbol\": instrument_alice.symbol,\n",
        "                                    \"transtype\": 'SELL',\n",
        "                                    \"trigPrice\": float(strategy.sl_price)\n",
        "                                    }\n",
        "\n",
        "                response  = place_order_alice(alice_data.UserID,alice_data.AccessToken, order_params_alice)\n",
        "                oid = response[0]['NOrdNo']\n",
        "\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name},Entry order executed, Placing SL order, SELL@{float(strategy.sl_price)}')\n",
        "                strategy.sl_oid = oid\n",
        "                strategy.trade_status = 4\n",
        "                strategy.save()\n",
        "\n",
        "            elif order_status == 'open':\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name},Entry order triggered... but order is in OPEN state...waiting for the entry to happen...')\n",
        "\n",
        "            elif order_status == 'cancelled':\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name},Entry order cancelled from outside.... Algo will not work.')\n",
        "\n",
        "            elif order_status == 'rejected':\n",
        "                erej_res = (orderbook[orderbook['Nstordno'] == str(strategy.entry_oid)]['RejReason'].values)[0]\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name}, Entry Order placement rejected, Reason {erej_res}')\n",
        "\n",
        "            else:\n",
        "                send_alert(f\"Strategy Name :{strategy.strategy_name},Entry Order status didn't match: Update the code for {order_status}\")\n",
        "\n",
        "        elif int(strategy.trade_status) == 4:\n",
        "            print('entered 4')\n",
        "            sl_order_status = (orderbook[orderbook['Nstordno'] == strategy.sl_oid]['Status'].values)[0]\n",
        "            quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "            print(sl_order_status)\n",
        "\n",
        "            if int((positionbook[positionbook['Tsym'] == instrument_alice.symbol]['Netqty'].values)[0]) >= quantity:\n",
        "                main_position_status = \"Running\"\n",
        "            else:\n",
        "                main_position_status = \"Closed\"\n",
        "\n",
        "\n",
        "            if sl_order_status == 'trigger pending':\n",
        "                if main_position_status == 'Running':\n",
        "                    ltp = instrument_to_ltp[int(strategy.instrument_token)]\n",
        "                    ltp_change_percentage = ((ltp - float(strategy.limit_price)) / float(strategy.limit_price)) * 100\n",
        "                    print(f\"ltp : {ltp}, profit : {ltp_change_percentage}\")\n",
        "                    stop_loss = strategy.sl_price\n",
        "                    # Update the stop loss based on target levels\n",
        "                    if ltp_change_percentage >= (strategy.target10 + strategy.final_trail_price):\n",
        "                        # Update stop loss to final_trail_sl percentage above current LTP\n",
        "                        stop_loss = ltp * (1 + (strategy.trail10 + ((ltp_change_percentage - strategy.target10)//strategy.final_trail_sl)* strategy.final_trail_sl)/ 100)\n",
        "                    elif ltp_change_percentage >= strategy.target10:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail10) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target9:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail9) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target8:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail8) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target7:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail7) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target6:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail6) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target5:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail5) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target4:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail4) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target3:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail3) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target2:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail2) / 100)\n",
        "                    elif ltp_change_percentage >= strategy.target1:\n",
        "                        stop_loss = float(strategy.limit_price) * (1 + float(strategy.trail1) / 100)\n",
        "\n",
        "                    if round_nearest(float(strategy.sl_price)) < round_nearest(float(stop_loss)):\n",
        "                        alice_object.cancel_order(strategy.sl_oid)\n",
        "                        quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "                        instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][int(strategy.instrument_token)]['exchange_token'])\n",
        "                        order_params_alice = {\n",
        "                                            \"complexty\": \"regular\",\n",
        "                                            \"discqty\": \"0\",\n",
        "                                            \"exch\": strategy.instrument_segment[:3],\n",
        "                                            \"pCode\": 'NRML',\n",
        "                                            \"prctyp\": \"SL\",\n",
        "                                            \"price\": round_nearest(stop_loss * .99),\n",
        "                                            \"qty\": quantity,\n",
        "                                            \"ret\": \"DAY\",\n",
        "                                            \"symbol_id\": str(instrument_alice.token),\n",
        "                                            \"trading_symbol\": instrument_alice.symbol,\n",
        "                                            \"transtype\": 'SELL',\n",
        "                                            \"trigPrice\": round_nearest(stop_loss)\n",
        "                                        }\n",
        "\n",
        "                        response  = place_order_alice(alice_data.UserID,alice_data.AccessToken, order_params_alice)\n",
        "                        # ---- get the order id\n",
        "                        oid = response[0]['NOrdNo']\n",
        "                        send_alert(f\"Strategy Name :{strategy.strategy_name}, selected instrument: {instrument_alice.symbol}, Stop Loss modifying to: {round_nearest(float(stop_loss))}, update : {oid}\")\n",
        "                        strategy.sl_price = round_nearest(float(stop_loss))\n",
        "                        strategy.sl_oid = oid\n",
        "                        strategy.save()\n",
        "\n",
        "                else:\n",
        "                    send_alert(f\"{strategy.strategy_name}: Cancelling SL order as the position is already closed\")\n",
        "                    alice_object.cancel_order(strategy.sl_oid)\n",
        "                    strategy.trade_status = 1\n",
        "                    strategy.save()\n",
        "\n",
        "            elif sl_order_status == 'cancelled':\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name}, SL order cancelled from outside.... Algo will not trail SL ....')\n",
        "                strategy.trade_status = 6\n",
        "                strategy.save()\n",
        "\n",
        "            elif sl_order_status == 'complete':\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name}, SL/TSL hit, Trade complete')\n",
        "                strategy.trade_status = 1\n",
        "                strategy.start_time = calculate_next_entry_time(strategy.interval)\n",
        "                strategy.save()\n",
        "\n",
        "            elif sl_order_status == 'rejected':\n",
        "                rej_res = rej_res = (orderbook[orderbook['Nstordno'] == str(strategy.sl_oid)]['RejReason'].values)[0]\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name}, SL/TSL order placement rejected, Reason: {rej_res}')\n",
        "\n",
        "            elif sl_order_status == 'open':\n",
        "                send_alert(f'Strategy Name :{strategy.strategy_name}, SL/TSL order triggered but still in OPEN state')\n",
        "\n",
        "            else:\n",
        "                send_alert(f\"Strategy Name :{strategy.strategy_name}, SL Order status didn't match: Update the code for {order_status}\")\n",
        "\n",
        "        elif int(strategy.trade_status) >= 5:\n",
        "            pass\n",
        "\n",
        "\n",
        "    # condition for intraday exit\n",
        "    elif run_today and strategy.intraday_exit < datetime.datetime.now().time():\n",
        "\n",
        "        if int(strategy.trade_status) <= 4:\n",
        "\n",
        "            if int(strategy.trade_status) == 2 :\n",
        "                alice_object.cancel_order(strategy.entry_oid)\n",
        "                send_alert(f\"Strategy Name :{strategy.strategy_name}, Intraday Exit - Cancelling Entry order - Order ID: {strategy.entry_oid}\")\n",
        "                strategy.trade_status = 6\n",
        "                strategy.save()\n",
        "\n",
        "            if int(strategy.trade_status) == 4 :\n",
        "                alice_object.cancel_order(strategy.sl_oid)\n",
        "                send_alert(f\"Strategy Name :{strategy.strategy_name}, Intraday Exit - Cancelling Stop Loss order - Order ID: {strategy.sl_oid}\")\n",
        "                instrument_alice = alice_object.get_instrument_by_token(strategy.instrument_segment[:3], live_instrument_dict[strategy.strategy_name]['data'][int(strategy.instrument_token)]['exchange_token'])\n",
        "                quantity = int(strategy.quantity) * int(live_instrument_dict[strategy.strategy_name]['lot_size'])\n",
        "                order_params_alice = {\n",
        "                                    \"complexty\": \"regular\",\n",
        "                                    \"discqty\": \"0\",\n",
        "                                    \"exch\": strategy.instrument_segment[:3],\n",
        "                                    \"pCode\": 'NRML',\n",
        "                                    \"prctyp\": \"MKT\",\n",
        "                                    \"price\": '0',\n",
        "                                    \"qty\": quantity,\n",
        "                                    \"ret\": \"DAY\",\n",
        "                                    \"symbol_id\": str(instrument_alice.token),\n",
        "                                    \"trading_symbol\": instrument_alice.symbol,\n",
        "                                    \"transtype\": 'SELL',\n",
        "                                    \"trigPrice\": '0'\n",
        "                                }\n",
        "\n",
        "                response  = place_order_alice(alice_data.UserID,alice_data.AccessToken, order_params_alice)\n",
        "                oid = response[0]['NOrdNo']\n",
        "                send_alert(f\"Strategy Name :{strategy.strategy_name}, Intraday Exit at market, update : {oid}\")\n",
        "                strategy.trade_status = 6\n",
        "                strategy.save()\n",
        "\n",
        "def scan_trigger_modify_cancel(kite_object,alice_object,alice_data):\n",
        "    # Define start and end times\n",
        "    start_time = datetime.time(9, 0)  # 9:00 am\n",
        "    end_time = datetime.time(23, 30)  # 11:30 pm\n",
        "    time.sleep(5)\n",
        "\n",
        "    # Main loop\n",
        "    while True:\n",
        "        current_time = datetime.datetime.now().time()  # Get current time\n",
        "        print(f\"Strategy Running: @{current_time}\")\n",
        "\n",
        "        # Check if current time is within the desired range\n",
        "        if start_time <= current_time <= end_time:\n",
        "            unique_strategies = InstrumentDetails.objects.all()\n",
        "            today_day_of_week = datetime.date.today().weekday()\n",
        "            today_field_name = day_to_field_map.get(today_day_of_week)\n",
        "\n",
        "            try:\n",
        "                orderbook = pd.DataFrame(alice_object.get_order_history())\n",
        "                try:\n",
        "                    positionbook = pd.DataFrame(alice_object.get_netwise_positions())\n",
        "                except:\n",
        "                    positionbook = pd.DataFrame()\n",
        "                # orderbook.to_csv(\"ob_suraj.csv\")\n",
        "                # print(orderbook)\n",
        "            except:\n",
        "                orderbook = pd.DataFrame()\n",
        "                positionbook = pd.DataFrame()\n",
        "                print('No Orders found...')\n",
        "\n",
        "            for strategy in unique_strategies:\n",
        "                threading.Thread(target = check_single_strategy,args = (strategy,today_field_name,today_day_of_week,alice_object,alice_data,kite_object,orderbook,positionbook,)).start()\n",
        "            time.sleep(2)\n",
        "        else:\n",
        "            break\n",
        "\n",
        "def close_websocket(ws,h,m,s):\n",
        "    import time\n",
        "    while True :\n",
        "        time.sleep(300)\n",
        "        from datetime import datetime\n",
        "        from datetime import time as datetime_time\n",
        "        print(datetime.now())\n",
        "        if datetime.now().time() > datetime_time(h,m,s):\n",
        "            ws.close()\n",
        "            break\n",
        "\n",
        "# Functions for live monitoring of any addition and deletion of strategy //////// in the InstrumentDetails table++++++++++\n",
        "def get_initial_instruments_list_and_update_live_instrument_dict():\n",
        "    global instrument_list\n",
        "    ins_details = InstrumentDetails.objects.all()\n",
        "    for strategy in ins_details:\n",
        "\n",
        "        # getting the variable values\n",
        "        strategy_name = strategy.strategy_name\n",
        "        name = strategy.instrument_name\n",
        "        segment = strategy.instrument_segment\n",
        "        instrument_type = strategy.instrument_type\n",
        "        strike = strategy.strike\n",
        "        expiry_type = strategy.expiry\n",
        "        exchange = segment[:3]\n",
        "        if strategy.instrument_type == 'CE' or strategy.instrument_type == 'PE':\n",
        "            expiry_dict = get_options_expiry(name,exchange)\n",
        "        elif strategy.instrument_type == 'FUT':\n",
        "            expiry_dict = get_futures_expiry(name,exchange)\n",
        "        else:\n",
        "            expiry_dict = {'current_week':'','next_week':'','current_month':'','next_month':''}\n",
        "        # print(expiry_dict)\n",
        "\n",
        "        # get the instrument token or tokens based on client's filter condition from the InstrumentDetails table eg:Banknigty current week calls\n",
        "        try:\n",
        "            try:\n",
        "                temp_token_df = pd.DataFrame()\n",
        "                # for strike given options\n",
        "                expiry_dict = get_options_expiry(strategy.instrument_name,(strategy.instrument_segment)[:3])\n",
        "                temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['expiry'] == expiry_dict[strategy.expiry]) & (df['instrument_type'] == strategy.instrument_type) & (df['strike'] == int(strategy.strike))]\n",
        "                a = temp_token_df.iloc[0]\n",
        "\n",
        "            except:\n",
        "                temp_token_df = pd.DataFrame()\n",
        "                # for strike given options\n",
        "                expiry_dict = get_options_expiry(strategy.instrument_name,(strategy.instrument_segment)[:3])\n",
        "                temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['expiry'] == expiry_dict[strategy.expiry]) & (df['instrument_type'] == strategy.instrument_type)]\n",
        "                a = temp_token_df.iloc[0]\n",
        "\n",
        "        except:\n",
        "            try:\n",
        "            # for futures\n",
        "                expiry_dict = get_futures_expiry(strategy.instrument_name,(strategy.instrument_segment)[:3])\n",
        "                temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['expiry'] == expiry_dict[strategy.expiry]) & (df['instrument_type'] == strategy.instrument_type)]\n",
        "                a = temp_token_df.iloc[0]\n",
        "            except:\n",
        "                try:\n",
        "                    temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['instrument_type'] == strategy.instrument_type)]\n",
        "                    a = temp_token_df.iloc[0]\n",
        "                except:\n",
        "                    send_alert(f'Failed to start strategy: {strategy.strategy_name}-- [Reason: Details does not match with any instrument]')\n",
        "\n",
        "\n",
        "        if len(temp_token_df) > 0:\n",
        "            send_alert(f'Starting strategy: {strategy.strategy_name}, instrument_domain: {len(temp_token_df)}')\n",
        "            final_df = temp_token_df[['instrument_token','exchange_token','tradingsymbol','lot_size','segment']]\n",
        "            lot_size = (final_df['lot_size'].unique().tolist())[0]\n",
        "            result_dict = final_df[['instrument_token','exchange_token','tradingsymbol','segment']].set_index('instrument_token').to_dict(orient='index')\n",
        "\n",
        "            # Check if the name already exists in the dictionary\n",
        "            if name in live_instrument_dict.keys():\n",
        "                # Update the existing key with the new data\n",
        "                live_instrument_dict[strategy_name]['data'].update(result_dict)\n",
        "            else:\n",
        "                # Create a new key and assign the value\n",
        "                live_instrument_dict[strategy_name] = {'data': result_dict, 'lot_size': lot_size}\n",
        "            print('sending alert')\n",
        "            # send_alert(f'Starting strategy: {strategy.strategy_name}, instrument_domain: {len(final_df)}')\n",
        "\n",
        "    if tickfeed == 'Zerodha':\n",
        "\n",
        "        instrument_list = [6802]\n",
        "        for k,v in live_instrument_dict.items():\n",
        "            for k1,v1 in v.items():\n",
        "                if k1 == 'data':\n",
        "                    for k2 in v1.keys():\n",
        "                        instrument_list.append(k2)\n",
        "        print(len(instrument_list))\n",
        "\n",
        "    elif tickfeed == 'Angel':\n",
        "        exchange_types = [1, 2, 3, 4, 5, 7, 13]\n",
        "        instrument_list = [{\"exchangeType\": exchange_type, \"tokens\": []} for exchange_type in exchange_types]\n",
        "\n",
        "        for k,v in live_instrument_dict.items():\n",
        "            for k1,v1 in v.items():\n",
        "                if k1 == 'data':\n",
        "                    for k2,v2 in v1.items():\n",
        "                        exc_type = exchange_type_mapping[v2['segment']]\n",
        "\n",
        "                        for segment in instrument_list:\n",
        "                            if segment['exchangeType'] == exc_type:\n",
        "                                tokens = segment['tokens']\n",
        "                                tokens.append(str(v2['exchange_token']))\n",
        "                                # Update the tokens list with the new tokens\n",
        "                                segment['tokens']=tokens\n",
        "\n",
        "        for segment in instrument_list:\n",
        "            if segment['exchangeType'] == 1:\n",
        "                tokens = segment['tokens']\n",
        "                tokens.append(\"1333\")\n",
        "                segment['tokens']=tokens\n",
        "\n",
        "        print(len(instrument_list))\n",
        "    return instrument_list\n",
        "\n",
        "\n",
        "#------------------------\n",
        "global fyersDataws\n",
        "global fyers_to_zerodha_mapping_list\n",
        "global fyers_token_list\n",
        "\n",
        "def Fyers_Subscribe_n_Unsubscribe(zerodha_instruments,check:str):\n",
        "\n",
        "        global check\n",
        "\n",
        "        from fyers_apiv3.FyersWebsocket import data_ws\n",
        "\n",
        "\n",
        "        def onmessage(message):\n",
        "\n",
        "            print(\"Response:\", message)\n",
        "\n",
        "            if check==\"Unsubscribe\":\n",
        "\n",
        "                if message['symbol'] in zerodha_instruments:\n",
        "                    # Unsubscribe from the specified symbols and data type\n",
        "                    data_type = \"SymbolUpdate\"\n",
        "                    symbols_to_unsubscribe = [message['symbol']]\n",
        "                    fyersDataws.unsubscribe(symbols=symbols_to_unsubscribe, data_type=data_type)\n",
        "                    print(f\"Un-Subscribing {message['symbol']}\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "        def onerror(message):\n",
        "\n",
        "            print(\"Error:\", message)\n",
        "\n",
        "\n",
        "        def onclose(message):\n",
        "\n",
        "            print(\"Connection closed:\", message)\n",
        "\n",
        "        def onopen():\n",
        "\n",
        "            # Specify the data type and symbols you want to subscribe to\n",
        "            data_type = \"SymbolUpdate\"\n",
        "\n",
        "            # Subscribe to the specified symbols and data type\n",
        "\n",
        "            #symbols = []\n",
        "\n",
        "            if check==\"Subscribe\":\n",
        "\n",
        "\n",
        "            # for zeordha_ins_tokens in zerodha_instruments:\n",
        "\n",
        "            #   fyers_to_zerodha_mapped_instrumemt = zerodha_mapping_dictionary.get(zeordha_ins_tokens).get(\"Fyers\")\n",
        "            #   if  fyers_to_zerodha_mapped_instrumemt is not None:\n",
        "            #       symbols.append(fyers_to_zerodha_mapped_instrumemt)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "            # symbols = ['NSE:SBIN-EQ'] # ====> Need to make this list global and update it constantly\n",
        "\n",
        "\n",
        "                fyersDataws.subscribe(symbols=zerodha_instruments, data_type=data_type)\n",
        "\n",
        "                # Keep the socket running to receive real-time data\n",
        "                fyersDataws.keep_running()\n",
        "\n",
        "\n",
        "\n",
        "        def connect_socket(client_id,access_token):\n",
        "            # Replace the sample access token with your actual access token obtained from Fyers\n",
        "            access_token = f'{client_id}:{access_token}'\n",
        "\n",
        "            # Create a FyersDataSocket instance with the provided parameters\n",
        "\n",
        "            if check==\"Subscribe\":\n",
        "              fyersDataws = data_ws.FyersDataSocket(\n",
        "                  access_token=access_token,       # Access token in the format \"appid:accesstoken\"\n",
        "                  log_path=\"\",                     # Path to save logs. Leave empty to auto-create logs in the current directory.\n",
        "                  litemode=True,                  # Lite mode disabled. Set to True if you want a lite response.\n",
        "                  write_to_file=False,              # Save response in a log file instead of printing it.\n",
        "                  reconnect=True,                  # Enable auto-reconnection to WebSocket on disconnection.\n",
        "                  on_connect=onopen,               # Callback function to subscribe to data upon connection.\n",
        "                  on_close=onclose,                # Callback function to handle WebSocket connection close events.\n",
        "                  on_error=onerror,                # Callback function to handle WebSocket errors.\n",
        "                  on_message=onmessage             # Callback function to handle incoming messages from the WebSocket.\n",
        "              )\n",
        "\n",
        "\n",
        "            else:\n",
        "              # Create a FyersDataSocket instance with the provided parameters\n",
        "                fyersDataws = data_ws.FyersDataSocket(\n",
        "                    access_token=access_token,       # Access token in the format \"appid:accesstoken\"\n",
        "                    log_path=\"\",                     # Path to save logs. Leave empty to auto-create logs in the current directory.\n",
        "                    litemode=False,                  # Lite mode disabled. Set to True if you want a lite response.\n",
        "                    write_to_file=False,              # Save response in a log file instead of printing it.\n",
        "                    reconnect=True,                  # Enable auto-reconnection to WebSocket on disconnection.\n",
        "                    on_connect=onopen,               # Callback function to subscribe to data upon connection.\n",
        "                    on_close=onclose,                # Callback function to handle WebSocket connection close events.\n",
        "                    on_error=onerror,                # Callback function to handle WebSocket errors.\n",
        "                    on_message=onmessage             # Callback function to handle incoming messages from the WebSocket.\n",
        "                )\n",
        "\n",
        "\n",
        "            # Establish a connection to the Fyers WebSocket\n",
        "            fyersDataws.connect()\n",
        "\n",
        "        client_id = '25PX9UUD1S-100'\n",
        "        access_token = fy_app.get_token()\n",
        "\n",
        "        connect_socket(client_id,access_token)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def live_strategy_database_check(kws):\n",
        "\n",
        "    inss_old = InstrumentDetails.objects.all()\n",
        "\n",
        "    while True:\n",
        "\n",
        "        inss = InstrumentDetails.objects.all()\n",
        "\n",
        "        if inss_old != inss:\n",
        "            removed_inss = [ins for ins in inss_old if ins not in inss]\n",
        "            new_inss = [ins for ins in inss if ins not in inss_old]\n",
        "\n",
        "            # subscribing new instruments to the socket\n",
        "            for strategy in new_inss:\n",
        "                # getting the variable values\n",
        "                strategy_name = strategy.strategy_name\n",
        "                name = strategy.instrument_name\n",
        "                segment = strategy.instrument_segment\n",
        "                exchange = segment[:3]\n",
        "                if strategy.instrument_type == 'CE' or strategy.instrument_type == 'PE':\n",
        "                    expiry_dict = get_options_expiry(name,exchange)\n",
        "                elif strategy.instrument_type == 'FUT':\n",
        "                    expiry_dict = get_futures_expiry(name,exchange)\n",
        "                else:\n",
        "                    expiry_dict = {'current_week':'','next_week':'','current_month':'','next_month':''}\n",
        "\n",
        "                # get the instrument token or tokens based on client's filter condition from the InstrumentDetails table eg:Banknigty current week calls\n",
        "                try:\n",
        "                    try:\n",
        "                        temp_token_df = pd.DataFrame()\n",
        "                        # for strike given options\n",
        "                        expiry_dict = get_options_expiry(strategy.instrument_name,(strategy.instrument_segment)[:3])\n",
        "                        temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['expiry'] == expiry_dict[strategy.expiry]) & (df['instrument_type'] == strategy.instrument_type) & (df['strike'] == int(strategy.strike))]\n",
        "                        a = temp_token_df.iloc[0]\n",
        "\n",
        "                    except:\n",
        "                        temp_token_df = pd.DataFrame()\n",
        "                        # for strike given options\n",
        "                        expiry_dict = get_options_expiry(strategy.instrument_name,(strategy.instrument_segment)[:3])\n",
        "                        temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['expiry'] == expiry_dict[strategy.expiry]) & (df['instrument_type'] == strategy.instrument_type)]\n",
        "                        a = temp_token_df.iloc[0]\n",
        "\n",
        "                except:\n",
        "                    try:\n",
        "                    # for futures\n",
        "                        expiry_dict = get_futures_expiry(strategy.instrument_name,(strategy.instrument_segment)[:3])\n",
        "                        temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['expiry'] == expiry_dict[strategy.expiry]) & (df['instrument_type'] == strategy.instrument_type)]\n",
        "                        a = temp_token_df.iloc[0]\n",
        "\n",
        "                    except:\n",
        "                        try:\n",
        "                            temp_token_df = df[(df['name'] == strategy.instrument_name) & (df['segment'] == strategy.instrument_segment) & (df['instrument_type'] == strategy.instrument_type)]\n",
        "                            a = temp_token_df.iloc[0]\n",
        "\n",
        "                        except:\n",
        "                            send_alert(f'Failed to start strategy: {strategy.strategy_name}-- [Reason: Details does not match with any instrument]')\n",
        "\n",
        "\n",
        "\n",
        "                if len(temp_token_df) > 0:\n",
        "                    lot_size = (temp_token_df['lot_size'].unique().tolist())[0]\n",
        "                    result_dict = temp_token_df[['instrument_token','exchange_token','tradingsymbol','segment']].set_index('instrument_token').to_dict(orient='index')\n",
        "\n",
        "                    if name in live_instrument_dict.keys():\n",
        "                        live_instrument_dict[strategy_name]['data'].update(result_dict)\n",
        "                    else:\n",
        "                        live_instrument_dict[strategy_name] = {'data': result_dict, 'lot_size': lot_size}\n",
        "\n",
        "\n",
        "\n",
        "                    if tickfeed == 'Zerodha':\n",
        "                        new_ins_to_subscribe = temp_token_df['instrument_token'].tolist()\n",
        "                        kws.subscribe(new_ins_to_subscribe)\n",
        "                        send_alert(f'Started strategy: {strategy.strategy_name}, new instrument domain: {len(new_ins_to_subscribe)}')\n",
        "\n",
        "                    elif tickfeed == 'Angel':\n",
        "                        new_ins = 0\n",
        "                        for i, row in temp_token_df.iterrows():\n",
        "                            exc_type = exchange_type_mapping[row['segment']]\n",
        "                            for segment in instrument_list:\n",
        "                                if segment['exchangeType'] == exc_type:\n",
        "                                    tokens = segment['tokens']\n",
        "                                    tokens.append(str(row['exchange_token']))\n",
        "                                    new_ins +=1\n",
        "                                    segment['tokens']=tokens\n",
        "\n",
        "                        kws.subscribe('abc123',1,instrument_list)\n",
        "                        send_alert(f'Started strategy: {strategy.strategy_name}, new instrument domain: {new_ins}')\n",
        "\n",
        "                    elif tickfeed == 'Fyers':\n",
        "                        new_ins_to_subscribe = []\n",
        "\n",
        "                        for zerodha_instruments in temp_token_df['instrument_token'].tolist():\n",
        "                            zerodha_to_fayers_mapped_instrument = zerodha_mapping_dictionary.get(zerodha_instruments).get(\"Fyers\")\n",
        "                            if zerodha_to_fayers_mapped_instrument not None:\n",
        "\n",
        "                                new_ins_to_subscribe.append(zerodha_to_fayers_mapped_instrument)\n",
        "\n",
        "                            else:\n",
        "\n",
        "                                print(f\"Mapping Not found for {zerodha_instruments} in Fyers\")\n",
        "\n",
        "                        if len(new_ins_to_subscribe)>0:\n",
        "\n",
        "                          Fyers_Subscribe_n_Unsubscribe(new_ins_to_subscribe,\"Subscribe\")\n",
        "\n",
        "                          send_alert(f'Started strategy: {strategy.strategy_name}, new instrument domain: {len(new_ins_to_subscribe)}')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "            # unsubscribing old instruments to the socket\n",
        "            for strategy in removed_inss:\n",
        "                try:\n",
        "                    strategy_name = strategy.strategy_name\n",
        "                    name = strategy.instrument_name\n",
        "                    if tickfeed ==\"Zerodha\":\n",
        "                        old_ins_to_unsubscribe = list(live_instrument_dict[strategy_name]['data'].keys())\n",
        "                        kws.unsubscribe(old_ins_to_unsubscribe)\n",
        "\n",
        "                    elif tickfeed == \"Angel\":\n",
        "                        exchange_types = [1, 2, 3, 4, 5, 7, 13]\n",
        "\n",
        "                        # Initialize token_list with empty tokens lists\n",
        "                        old_ins_to_unsubscribe = [{\"exchangeType\": exchange_type, \"tokens\": []} for exchange_type in exchange_types]\n",
        "\n",
        "\n",
        "                        for k,v in live_instrument_dict.items():\n",
        "                            if k == strategy_name:\n",
        "                                for k1,v1 in v.items():\n",
        "                                    if k1 == 'data':\n",
        "                                        for k2,v2 in v1.items():\n",
        "                                            exc_type = exchange_type_mapping[v2['segment']]\n",
        "\n",
        "                                            for segment in instrument_list:\n",
        "                                                if segment['exchangeType'] == exc_type:\n",
        "                                                    tokens = segment['tokens']\n",
        "                                                    tokens.append(str(v2['exchange_token']))\n",
        "                                                    segment['tokens']=tokens\n",
        "\n",
        "\n",
        "                        kws.unsubscribe('abc123',1,old_ins_to_unsubscribe)\n",
        "\n",
        "                    elif tickfeed==\"Fyers\":\n",
        "\n",
        "                        fyers_instrument_to_unsubscibe = []\n",
        "\n",
        "                        old_ins_to_unsubscribe = list(live_instrument_dict[strategy_name]['data'].keys())\n",
        "\n",
        "                        for zerodha_instruments in old_ins_to_unsubscribe:\n",
        "                            zerodha_to_fayers_mapped_instrument = zerodha_mapping_dictionary.get(zerodha_instruments).get(\"Fyers\")\n",
        "                            if zerodha_to_fayers_mapped_instrument not None:\n",
        "\n",
        "                                fyers_instrument_to_unsubscibe.append(zerodha_to_fayers_mapped_instrument)\n",
        "\n",
        "                            else:\n",
        "\n",
        "                                print(f\"Mapping Not found for {zerodha_instruments} in Fyers\")\n",
        "\n",
        "                        if len(fyers_instrument_to_unsubscibe)>0:\n",
        "\n",
        "                          Fyers_Subscribe_n_Unsubscribe(fyers_instrument_to_unsubscibe,\"Unsubscribe\")\n",
        "\n",
        "                    send_alert(f'Stopping Strategy :{strategy_name}')\n",
        "\n",
        "\n",
        "\n",
        "                except:\n",
        "                    send_alert(f'Failed to stop strategy :{strategy_name}')\n",
        "\n",
        "        time.sleep(1.5)\n",
        "        inss_old = inss\n",
        "\n",
        "def make_request (method, url, headers=None, params=None, data=None):\n",
        "            response = None\n",
        "            try:\n",
        "                if method == 'GET':\n",
        "                    response = requests.get(url, headers=headers, params=params)\n",
        "                else:\n",
        "                    raise ValueError('Not Valid HTTP method. ')\n",
        "                if response.status_code == 200:\n",
        "                    return response.json ()\n",
        "                else:\n",
        "                    return response\n",
        "            except requests.exceptions.RequestException as e:\n",
        "                print (f'Error: {e}')\n",
        "            return None\n",
        "\n",
        "def get_historical_candle(instrument):\n",
        "\n",
        "    global historical_data\n",
        "\n",
        "    interval = \"1minute\"\n",
        "\n",
        "    to_date = datetime.datetime.now().strftime('%Y-%m-%d')\n",
        "    from_date = (datetime.datetime.now()-datetime.timedelta(days=5)).strftime('%Y-%m-%d')\n",
        "\n",
        "    intraday_url = f\"https://api.upstox.com/v2/historical-candle/intraday/{instrument}/{interval}\"\n",
        "\n",
        "    historical_url = f\"https://api.upstox.com/v2/historical-candle/{instrument}/{interval}/{to_date}/{from_date}\"\n",
        "\n",
        "    payload={}\n",
        "\n",
        "    headers = {\n",
        "    'Accept': 'application/json',\n",
        "    \"Api-version\":'2.0'\n",
        "    }\n",
        "\n",
        "    for urls in [historical_url,intraday_url]:\n",
        "        response = make_request(\"GET\",urls,headers=headers,data=payload)\n",
        "        if response['status']==\"success\":\n",
        "            print(\"Success\")\n",
        "            # print(response)\n",
        "            if len(response['data']['candles'])!=0:\n",
        "                data_recived = pd.DataFrame(data=response['data']['candles'],columns=[\"date\",\"o\",\"h\",\"l\",\"c\",\"v\",\"oi\"]).drop(columns=\"oi\").set_index(\"date\").to_dict(orient=\"index\")\n",
        "                if instrument not in historical_data.keys():\n",
        "\n",
        "                    # historical_data[instrument] = pd.DataFrame(data=response['data']['candles'],columns=[\"date\",\"o\",\"h\",\"l\",\"c\",\"v\",\"oi\"]).drop(columns=\"oi\").set_index(\"date\").to_dict(orient=\"index\")\n",
        "                    # print(len(historical_data[instrument]))\n",
        "                    print(\"Fetching Historical Data for\",instrument)\n",
        "                    historical_data[instrument] = {pd.to_datetime(key).tz_localize(None):value for key,value in data_recived.items()}\n",
        "                    # print(historical_data[instrument])\n",
        "                else:\n",
        "                    print(\"Updating Intra day data for \",instrument)\n",
        "                    # print(\"here\")\n",
        "                    # print(pd.DataFrame(data=response['data']['candles'],columns=[\"date\",\"o\",\"h\",\"l\",\"c\",\"v\",\"oi\"]).drop(columns=\"oi\").set_index(\"date\"))\n",
        "                    historical_data[instrument].update({pd.to_datetime(key).tz_localize(None):value for key,value in data_recived.items()})\n",
        "                    # print(len(historical_data[instrument]))\n",
        "        else:\n",
        "            print(\"Failure\")\n",
        "\n",
        "\n",
        "        # hist_data[\"ts\"] = pd.to_datetime(hist_data[\"ts\"].str.split(\"+\").str[0],utc=False)\n",
        "        # hist_data.sort_values(\"ts\",inplace=True)\n",
        "        # historical_data[instrument] = hist_data.iloc[:,:5].reset_index(drop=True)\n",
        "            # print(historical_data[instrument])\n",
        "\n",
        "def get_market_data_feed_authorize(api_version, configuration):\n",
        "    \"\"\"Get authorization for market data feed.\"\"\"\n",
        "    api_instance = upstox_client.WebsocketApi(\n",
        "        upstox_client.ApiClient(configuration))\n",
        "    api_response = api_instance.get_market_data_feed_authorize(api_version)\n",
        "    return api_response\n",
        "\n",
        "def decode_protobuf(buffer):\n",
        "    \"\"\"Decode protobuf message.\"\"\"\n",
        "    feed_response = pb.FeedResponse()\n",
        "    feed_response.ParseFromString(buffer)\n",
        "    return feed_response\n",
        "\n",
        "def process_ticks(ticks):\n",
        "\n",
        "    global historical_data\n",
        "\n",
        "    if list(ticks[\"feeds\"].keys())[0] in historical_data.keys():\n",
        "\n",
        "        print(\"***************\",list(ticks[\"feeds\"].keys())[0],\"**********************\")\n",
        "        live_data_feed_1 = ticks[\"feeds\"][list(ticks[\"feeds\"].keys())[0]]['ff']['indexFF']['marketOHLC']['ohlc'][1]\n",
        "        live_data_feed_2 = ticks[\"feeds\"][list(ticks[\"feeds\"].keys())[0]]['ff']['indexFF']['marketOHLC']['ohlc'][2]\n",
        "        print(\"*\"*100)\n",
        "\n",
        "        print(\"live_data_feed-Last Candle\",datetime.fromtimestamp(int(live_data_feed_1['ts'])/1000).strftime('%Y-%m-%dT%H:%M:%S%z'))\n",
        "        print(live_data_feed_1)\n",
        "\n",
        "        print(\"live_data_feed-Current Candle\",datetime.fromtimestamp(int(live_data_feed_2['ts'])/1000).strftime('%Y-%m-%dT%H:%M:%S'))\n",
        "        print(live_data_feed_2)\n",
        "\n",
        "\n",
        "        # print(data_dict)\n",
        "\n",
        "        ## Added By Amesh -- 5 mar\n",
        "\n",
        "        if \"volume\" in live_data_feed_1.keys() or \"volume\" in live_data_feed_2.keys():\n",
        "\n",
        "            v1,v2 = live_data_feed_1[\"volume\"],live_data_feed_2[\"volume\"]\n",
        "\n",
        "        else:\n",
        "            v1,v2 = 0,0\n",
        "\n",
        "        ## Added By Amesh -- 5 mar\n",
        "\n",
        "\n",
        "        historical_data[list(ticks[\"feeds\"].keys())[0]].update({datetime.fromtimestamp(int(live_data_feed_1['ts'])/1000).strftime('%Y-%m-%dT%H:%M:%S'):{'o':live_data_feed_1['open'],'h':live_data_feed_1['high'],'l':live_data_feed_1['low'],'c':live_data_feed_1['close'],'v':v1},\n",
        "                                                                    datetime.fromtimestamp(int(live_data_feed_2['ts'])/1000).strftime('%Y-%m-%dT%H:%M:%S'):{'o':live_data_feed_2['open'],'h':live_data_feed_2['high'],'l':live_data_feed_2['low'],'c':live_data_feed_2['close'],'v':v2}})\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "global fetch_market_data_running\n",
        "\n",
        "\n",
        "async def fetch_market_data(instruments_list, access_token):\n",
        "\n",
        "            # global fetch_market_data_running\n",
        "\n",
        "\n",
        "\n",
        "            ## Added By Amesh -- 5 mar\n",
        "\n",
        "            ## Call live_candlefeed_database_check function here to get the updated list of instruments\n",
        "\n",
        "\n",
        "            if len(instruments_list)>0:\n",
        "\n",
        "                \"\"\"Warming up via getting the data till now\"\"\"\n",
        "                for instrument in instruments_list:  # if instrument is already there then do we need to get the historical data again?\n",
        "                    get_historical_candle(instrument)\n",
        "\n",
        "                \"\"\"Fetch market data using WebSocket and print it.\"\"\"\n",
        "                # Create default SSL context\n",
        "                ssl_context = ssl.create_default_context()\n",
        "                ssl_context.check_hostname = False\n",
        "                ssl_context.verify_mode = ssl.CERT_NONE\n",
        "\n",
        "                # Configure OAuth2 access token for authorization\n",
        "                configuration = upstox_client.Configuration()\n",
        "\n",
        "                api_version = '2.0'\n",
        "                configuration.access_token = access_token\n",
        "\n",
        "                # Get market data feed authorization\n",
        "                response = get_market_data_feed_authorize(api_version, configuration)\n",
        "\n",
        "                print(\"response*********************\")\n",
        "                print(response)\n",
        "\n",
        "                # Connect to the WebSocket with SSL context\n",
        "                async with websockets.connect(response.data.authorized_redirect_uri, ssl=ssl_context) as websocket:\n",
        "                    print('Connection established')\n",
        "\n",
        "                    await asyncio.sleep(1)  # Wait for 1 second\n",
        "\n",
        "                    # Data to be sent over the WebSocket\n",
        "                    data = {\n",
        "                        \"guid\": \"someguid\",\n",
        "                        \"method\": \"sub\",\n",
        "                        \"data\": {\n",
        "                            \"mode\": \"full\",\n",
        "                            \"instrumentKeys\": instruments_list\n",
        "                        }\n",
        "                    }\n",
        "\n",
        "                    # Convert data to binary and send over WebSocket\n",
        "                    binary_data = json.dumps(data).encode('utf-8')\n",
        "                    await websocket.send(binary_data)\n",
        "\n",
        "                    # Continuously receive and decode data from WebSocket\n",
        "                    while fetch_market_data_running:\n",
        "                        message = await websocket.recv()\n",
        "                        decoded_data = decode_protobuf(message)\n",
        "\n",
        "                        # Convert the decoded data to a dictionary\n",
        "                        data_dict = MessageToDict(decoded_data)\n",
        "                        threading.Thread(target=process_ticks,args=(data_dict,)).start()\n",
        "\n",
        "                        # Check the flag to stop/kills the function\n",
        "                        if not fetch_market_data_running:\n",
        "                            break\n",
        "\n",
        "                        # for Equity:marketFF\n",
        "                        # for INDEX:indexFF\n",
        "                        # for Future: marketFF\n",
        "\n",
        "\n",
        "\n",
        "def live_candlefeed_database_check(access_token):\n",
        "\n",
        "    # import asyncio\n",
        "\n",
        "\n",
        "    # Example usage:\n",
        "        # Start the fetch_market_data coroutine\n",
        "\n",
        "    def run_socket(instruments_list, access_token):\n",
        "\n",
        "        asyncio.run(fetch_market_data(instruments_list, access_token))\n",
        "\n",
        "\n",
        "    inss_old = InstrumentDetails.objects.all()\n",
        "\n",
        "    global upstocks_instrument_list  # Declare upstocks_instrument_list as global inside the function\n",
        "    if 'upstocks_instrument_list' not in globals():  # Check if upstocks_instrument_list is not already initialized\n",
        "        upstocks_instrument_list = []  # Initialize global_list if not already initialized\n",
        "\n",
        "\n",
        "    instrument_list = []\n",
        "\n",
        "\n",
        "    for instruments_ in inss_old:\n",
        "        instrument_list.append(instruments_.instrument_token)\n",
        "\n",
        "    instrument_list = list(set(instrument_list))\n",
        "\n",
        "    for inst_list in instrument_list:\n",
        "\n",
        "        zerodha_to_uptox_mapped_instrument = zerodha_mapping_dictionary.get(instrument_tokens).get(\"Upstox\")\n",
        "\n",
        "        if zerodha_to_uptox_mapped_instrument is not None:\n",
        "\n",
        "          upstocks_instrument_list.append(zerodha_to_uptox_mapped_instrument)\n",
        "\n",
        "        else:\n",
        "\n",
        "          print(f\"Mapping Not Found in upstox for the given Instrument {inst_list}\")\n",
        "\n",
        "\n",
        "    if len(upstocks_instrument_list)>0:\n",
        "        print(\"Initial Run\")\n",
        "        threading.Thread(target=run_socket,args = (upstocks_instrument_list, access_token)).start()\n",
        "\n",
        "\n",
        "\n",
        "    while True:\n",
        "        inss = InstrumentDetails.objects.all()\n",
        "\n",
        "        temp_instrument_list = list(set([instruments_.instrument_token for instruments_ in inss]))\n",
        "\n",
        "\n",
        "\n",
        "        # temp_instrument_list = list(set(temp_instrument_list))\n",
        "\n",
        "        if instrument_list != temp_instrument_list:\n",
        "\n",
        "            removed_inss = [ins for ins in instrument_list if ins not in temp_instrument_list]\n",
        "\n",
        "            if len(removed_inss)>0:\n",
        "              for removed_tokens in removed_inss:\n",
        "\n",
        "                  zerodha_to_uptox_mapped_instrument = zerodha_mapping_dictionary.get(removed_tokens).get(\"Upstox\")\n",
        "\n",
        "                  if zerodha_to_uptox_mapped_instrument in upstocks_instrument_list:\n",
        "\n",
        "                    upstocks_instrument_list.remove(zerodha_to_uptox_mapped_instrument)\n",
        "\n",
        "            new_inss = [ins for ins in temp_instrument_list if ins not in instrument_list]\n",
        "\n",
        "            # subscribing new instruments to the socket\n",
        "\n",
        "            for instrument_tokens in new_inss:\n",
        "\n",
        "                zerodha_to_uptox_mapped_instrument = zerodha_mapping_dictionary.get(instrument_tokens).get(\"Upstox\")\n",
        "\n",
        "                if zerodha_to_uptox_mapped_instrument is not None:\n",
        "\n",
        "                    upstocks_instrument_list.append(zerodha_to_uptox_mapped_instrument)\n",
        "\n",
        "                else:\n",
        "\n",
        "                    print(f\"Mapping Not Found in upstox for the given Instrument {inst_list}\")\n",
        "\n",
        "\n",
        "            fetch_market_data_running = False\n",
        "            print(\"Stopping the Upstock Socket\")\n",
        "            fetch_market_data_running = True\n",
        "            print(\"Re Running the Upstock Socket\")\n",
        "\n",
        "            threading.Thread(target=run_socket,args = (upstocks_instrument_list, access_token)).start()\n",
        "\n",
        "\n",
        "        time.sleep(2)\n",
        "\n",
        "        instrument_list = temp_instrument_list.copy(deep=True)\n",
        "                # change it for upstox\n",
        "\n",
        "\n",
        "# function for live ltp update to instrument_to_ltp dict ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n",
        "def update_ltp(ticks):\n",
        "    # print(\"pushing ticks to q\")\n",
        "    if tickfeed == 'Zerodha':\n",
        "        for tick in ticks:\n",
        "            instrument_to_ltp[tick['instrument_token']] = tick['last_price']\n",
        "    elif tickfeed == 'Angel':\n",
        "        instrument_to_ltp[ticks['token']] = float(ticks['last_traded_price'])/100\n",
        "\n",
        "    print(instrument_to_ltp)\n",
        "\n",
        "\n",
        "def Strategy_Main():\n",
        "    create_instrument_master()\n",
        "    from kiteconnect import KiteConnect,KiteTicker\n",
        "\n",
        "    # Replace these variables with actual values from 'data'\n",
        "    # brokerobj = AngelTable.objects.filter(Broker__Name==\"Zerodha\").first()\n",
        "    # api_key = brokerobj.AppID\n",
        "    # request_token = brokerobj.AccessToken\n",
        "    # datakite = KiteConnect(api_key=api_key)\n",
        "    # datakite.set_access_token(request_token)\n",
        "    # kws = KiteTicker(api_key, request_token)\n",
        "\n",
        "    # temp kite object\n",
        "    import threading\n",
        "    import json,requests\n",
        "    response = requests.get(\"http://64.227.168.207/zerodha-creds/KZ8816/\")\n",
        "    data = json.loads(response.text)\n",
        "    api_key,api_sec,request_token = data['api_key'],data['api_sec'],data['access_tok']\n",
        "    datakite = KiteConnect(api_key=api_key)\n",
        "    datakite.set_access_token(request_token)\n",
        "    kite = datakite\n",
        "    kite.profile()\n",
        "    kws = KiteTicker(api_key, request_token)\n",
        "\n",
        "    # CREATE THE OBJECT WHERE TO PLACE THE ORDER IF NEEDED |||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
        "    # alice_data = AngelTable.objects.filter(Broker__Name=\"Alice Blue\").first()\n",
        "    # alice = AliceBlue(alice_data.UserID,alice_data.AccessToken,['NSE','NFO','BSE','BFO'])\n",
        "\n",
        "    print(\"Objects Created....\")\n",
        "\n",
        "    # getting final set if instruments\n",
        "    final_instruments = get_initial_instruments_list_and_update_live_instrument_dict()\n",
        "    pprint(final_instruments)\n",
        "    total_instruments = 0\n",
        "    if tickfeed == 'Zerodha':\n",
        "        total_instruments = len(final_instruments)\n",
        "    elif tickfeed == 'Angel':\n",
        "        for segment in final_instruments:\n",
        "            total_instruments += len(segment['tokens'])\n",
        "\n",
        "    print(f'Subscribing {total_instruments} instruments....')\n",
        "\n",
        "    if tickfeed == \"Zerodha\":\n",
        "\n",
        "        def on_ticks(ws, ticks):\n",
        "            # print(ticks)\n",
        "            # print(instrument_to_ltp)\n",
        "            # print(live_instrument_dict)\n",
        "            threading.Thread(target=update_ltp,args=(ticks,)).start()\n",
        "\n",
        "\n",
        "        def on_connect(ws, response):\n",
        "            ws.set_mode(ws.MODE_FULL, final_instruments)\n",
        "            threading.Thread(target=send_alert, args = (\"Algo started ...\",)).start()\n",
        "            threading.Thread(target=close_websocket, args = (ws,11,30,00,)).start()\n",
        "\n",
        "            # to trigger orders or modify or cancel orders based on the condition\n",
        "            # threading.Thread(target = scan_trigger_modify_cancel, args = (kite,alice,alice_data)).start()\n",
        "\n",
        "            # to check in live if there is some changes in the strategy table, now addition or anything\n",
        "            threading.Thread(target = live_strategy_database_check, args = (kws,)).start()\n",
        "            print('Datafeed Socket Started')\n",
        "\n",
        "        def on_close(ws, code, reason):\n",
        "            ws.stop()\n",
        "            threading.Thread(target=send_alert, args = (\"Algo Stopped ...\",)).start()\n",
        "\n",
        "        # Assign the callbacks.\n",
        "        kws.on_ticks = on_ticks\n",
        "        kws.on_connect = on_connect\n",
        "        kws.on_close = on_close\n",
        "\n",
        "        # starting the socket\n",
        "        kws.connect(threaded=True)\n",
        "\n",
        "    elif tickfeed == 'Angel':\n",
        "        from SmartApi.smartWebSocketV2 import SmartWebSocketV2\n",
        "        import threading\n",
        "        from datetime import datetime\n",
        "        import pyotp\n",
        "        from SmartApi.smartConnect import SmartConnect\n",
        "        from logzero import logger\n",
        "\n",
        "        API_KEY = '8m0AI5DV'\n",
        "        username = 'AIIP1092'\n",
        "        token = 'OPUEGKMNABMQVMZJL7XP4JYDIM'\n",
        "        pwd = '1234'\n",
        "        obj=SmartConnect(api_key=API_KEY)\n",
        "        data = obj.generateSession(username,pwd,pyotp.TOTP(token).now())\n",
        "        print(data)\n",
        "\n",
        "        AUTH_TOKEN = data['data']['jwtToken']\n",
        "        refreshToken= data['data']['refreshToken']\n",
        "        FEED_TOKEN=obj.getfeedToken()\n",
        "        res = obj.getProfile(refreshToken)\n",
        "        print(res['data'])\n",
        "        correlation_id = \"abc123\"\n",
        "        action = 1\n",
        "        mode = 1\n",
        "\n",
        "        #retry_strategy=0 for simple retry mechanism\n",
        "        sws = SmartWebSocketV2(AUTH_TOKEN, API_KEY, username, FEED_TOKEN,max_retry_attempt=2, retry_strategy=0, retry_delay=10, retry_duration=30)\n",
        "\n",
        "        def on_data(wsapp, ticks):\n",
        "            threading.Thread(target=update_ltp,args=(ticks,)).start()\n",
        "            # print(f'{ticks}')\n",
        "\n",
        "        def on_control_message(wsapp, message):\n",
        "            logger.info(f\"Control Message: {message}\")\n",
        "\n",
        "        def on_open(wsapp):\n",
        "            logger.info(\"on open\")\n",
        "            some_error_condition = False\n",
        "            if some_error_condition:\n",
        "                error_message = \"Simulated error\"\n",
        "                if hasattr(wsapp, 'on_error'):\n",
        "                    wsapp.on_error(\"Custom Error Type\", error_message)\n",
        "            else:\n",
        "                sws.subscribe(correlation_id, mode, final_instruments)\n",
        "                # sws.unsubscribe(correlation_id, mode, token_list1)\n",
        "            threading.Thread(target = live_strategy_database_check, args = (sws,)).start()\n",
        "            print('Datafeed Socket Started')\n",
        "\n",
        "        def on_error(wsapp, error):\n",
        "            logger.error(error)\n",
        "\n",
        "        def on_close(wsapp):\n",
        "            logger.info(\"Close\")\n",
        "\n",
        "        def close_connection():\n",
        "            sws.close_connection()\n",
        "\n",
        "\n",
        "        # Assign the callbacks.\n",
        "        sws.on_open = on_open\n",
        "        sws.on_data = on_data\n",
        "        sws.on_error = on_error\n",
        "        sws.on_close = on_close\n",
        "        sws.on_control_message = on_control_message\n",
        "\n",
        "        # sws.connect()\n",
        "        threading.Thread(target = sws.connect).start()\n",
        "\n",
        "    elif tickfeed == 'Fyers':\n",
        "\n",
        "\n",
        "\n",
        "        global fyersDataws\n",
        "        global fyers_to_zerodha_mapping_list\n",
        "        global fyers_token_list\n",
        "\n",
        "\n",
        "\n",
        "        from fyers_apiv3.FyersWebsocket import data_ws\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "        def onmessage(message):\n",
        "            \"\"\"\n",
        "            Callback function to handle incoming messages from the FyersDataSocket WebSocket.\n",
        "\n",
        "            Parameters:\n",
        "                message (dict): The received message from the WebSocket.\n",
        "\n",
        "            \"\"\"\n",
        "            print(\"Response:\", message)\n",
        "\n",
        "\n",
        "        def onerror(message):\n",
        "            \"\"\"\n",
        "            Callback function to handle WebSocket errors.\n",
        "\n",
        "            Parameters:\n",
        "                message (dict): The error message received from the WebSocket.\n",
        "\n",
        "\n",
        "            \"\"\"\n",
        "            print(\"Error:\", message)\n",
        "\n",
        "\n",
        "        def onclose(message):\n",
        "            \"\"\"\n",
        "            Callback function to handle WebSocket connection close events.\n",
        "            \"\"\"\n",
        "            print(\"Connection closed:\", message)\n",
        "\n",
        "        def onopen():\n",
        "            \"\"\"\n",
        "            Callback function to subscribe to data type and symbols upon WebSocket connection.\n",
        "\n",
        "            \"\"\"\n",
        "            # Specify the data type and symbols you want to subscribe to\n",
        "            data_type = \"SymbolUpdate\"\n",
        "\n",
        "            # Subscribe to the specified symbols and data type\n",
        "\n",
        "            #symbols = []\n",
        "            # for zeordha_ins_tokens in instrument_list:\n",
        "\n",
        "            #   fyers_to_zerodha_mapped_instrumemt = zerodha_mapping_dictionary.get(zeordha_ins_tokens).get(\"Fyers\")\n",
        "            #   if  fyers_to_zerodha_mapped_instrumemt is not None:\n",
        "            #       symbols.append(fyers_to_zerodha_mapped_instrumemt)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "            symbols = ['NSE:SBIN-EQ'] # ====> Need to make this list global and update it constantly\n",
        "\n",
        "\n",
        "            fyersDataws.subscribe(symbols=symbols, data_type=data_type)\n",
        "\n",
        "            # Keep the socket running to receive real-time data\n",
        "            fyersDataws.keep_running()\n",
        "\n",
        "            client_id = '25PX9UUD1S-100'\n",
        "            access_token = fy_app.get_token()\n",
        "\n",
        "        def connect_socket(client_id,access_token):\n",
        "            # Replace the sample access token with your actual access token obtained from Fyers\n",
        "            access_token = f'{client_id}:{access_token}'\n",
        "\n",
        "            # Create a FyersDataSocket instance with the provided parameters\n",
        "            fyersDataws = data_ws.FyersDataSocket(\n",
        "                access_token=access_token,       # Access token in the format \"appid:accesstoken\"\n",
        "                log_path=\"\",                     # Path to save logs. Leave empty to auto-create logs in the current directory.\n",
        "                litemode=True,                  # Lite mode disabled. Set to True if you want a lite response.\n",
        "                write_to_file=False,              # Save response in a log file instead of printing it.\n",
        "                reconnect=True,                  # Enable auto-reconnection to WebSocket on disconnection.\n",
        "                on_connect=onopen,               # Callback function to subscribe to data upon connection.\n",
        "                on_close=onclose,                # Callback function to handle WebSocket connection close events.\n",
        "                on_error=onerror,                # Callback function to handle WebSocket errors.\n",
        "                on_message=onmessage             # Callback function to handle incoming messages from the WebSocket.\n",
        "            )\n",
        "\n",
        "\n",
        "\n",
        "            # Establish a connection to the Fyers WebSocket\n",
        "            fyersDataws.connect()\n",
        "\n",
        "\n",
        "        connect_socket(client_id,access_token)\n",
        "        pass\n",
        "\n",
        "    if candlefeed:\n",
        "\n",
        "        # historical_data = {} # need to make this as Global\n",
        "        code = \"RxAeX2\"\n",
        "        api_key = \"bf5d6189-d437-4b59-ba32-4f38866bff55\"\n",
        "        secret = \"vni2jnvgcj\"\n",
        "        rurl = \"https://www.google.com\"\n",
        "\n",
        "        # Automate above process for Login\n",
        "\n",
        "        fetch_market_data_running  = True\n",
        "\n",
        "        # def get_access_token(code,api_key,secret,rurl):\n",
        "            # url_access_token = \"https://api.upstox.com/v2/login/authorization/token\"\n",
        "            # headers = {\n",
        "            #     \"accept\": \"application/json\",\n",
        "            #     \"Content-Type\": \"application/x-www-form-urlencoded\"\n",
        "            # }\n",
        "            # data = {\n",
        "            #     \"code\": code,\n",
        "            #     \"client_id\": api_key,\n",
        "            #     \"client_secret\": secret,\n",
        "            #     \"redirect_uri\": rurl,\n",
        "            #     \"grant_type\": \"authorization_code\"\n",
        "            # }\n",
        "\n",
        "            # response = (requests.post(url_access_token, headers=headers, data=data))\n",
        "            # at = (response.json())['access_token']\n",
        "            # return at\n",
        "\n",
        "        access_token = 'eyJ0eXAiOiJKV1QiLCJrZXlfaWQiOiJza192MS4wIiwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiI3NzM0ODYiLCJqdGkiOiI2NWU3ZmNiNWQ1MTA1NzE3ZTY0YjhhZGEiLCJpc011bHRpQ2xpZW50IjpmYWxzZSwiaXNBY3RpdmUiOnRydWUsInNjb3BlIjpbImludGVyYWN0aXZlIiwiaGlzdG9yaWNhbCJdLCJpYXQiOjE3MDk3MDIzMjUsImlzcyI6InVkYXBpLWdhdGV3YXktc2VydmljZSIsImV4cCI6MTcwOTc2MjQwMH0.JV6AbQVnwwH1IjthnHfmAl1DdykxMut0QkOLXVwVgW4'\n",
        "        # instruments_list = [\"NSE_INDEX|Nifty Bank\"] # Manually Entered Value\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "                # Call the Signal_generation(data,instrument) # pass only parameter isntrument : list(ticks[\"feeds\"].keys())[0] and data will global historical_data\n",
        "\n",
        "\n",
        "\n",
        "                # Modify function to ==>Signal_generation(instrument)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "        threading.Thread(target=live_candlefeed_database_check,args = (access_token)).start()\n",
        "\n",
        "        # threading.Thread(target=run_socket,args = (instruments_list, access_token)).start()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IzRuTLj3qo7g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "CLDuvPzkqvCW"
      }
    }
  ]
}
